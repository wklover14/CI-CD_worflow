name: CI/CD with Terraform
on:
  push:
    branches:
      - master

env:
  AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
  SSH_PUBLIC_KEY: ${{ secrets.AWS_SSH_PUBLIC_KEY }}
  AWS_REGION: eu-north-1

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set_ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init -backend-config="bucket=${{ env.AWS_BUCKET_NAME }}" -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -var="region=${{ env.AWS_REGION }}" \
          -var="public_key=${{ env.SSH_PUBLIC_KEY }}" \
          -var="private_key=${{ env.SSH_PRIVATE_KEY }}" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform

      - name: Print Terraform Outputs
        run: terraform output
        working-directory: ./terraform

      - name: Set output
        id: set_ip
        run: echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        working-directory: ./terraform

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy_infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build and push Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-nodejs-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecr create-repository --repository-name $REPOSITORY || true
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./

      - name: Deploy Docker image to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.deploy_infra.outputs.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}  # Use secrets directly for private key
          port: 22
          script: |
            sudo apt-get update

            # Add Docker's official GPG key:
            sudo apt-get install ca-certificates curl
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update

            #Install aws cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            sudo $(aws ecr get-login --no-include-email --region ${{ env.AWS_REGION }})
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
            sudo docker run -d --name myappcontainer -p 80:3000 ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-nodejs-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1
